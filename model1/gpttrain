# import tensorflow as tf
# from tensorflow.keras.preprocessing.image import ImageDataGenerator
# from tensorflow.keras.applications.inception_resnet_v2 import InceptionResNetV2

# import os

# os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'

# # Set up the input image size and number of classes
# img_height, img_width = 1280, 720
# num_classes = 10

# # Load the pre-trained Inception-ResNetV2 model with ImageNet weights
# base_model = InceptionResNetV2(weights='imagenet', include_top=False, input_shape=(img_height, img_width, 3))

# # Freeze the pre-trained layers
# for layer in base_model.layers:
#     layer.trainable = False

# # Add new trainable layers on top of the frozen layers
# x = base_model.output
# x = tf.keras.layers.GlobalAveragePooling2D()(x)
# x = tf.keras.layers.Dense(1024, activation='relu')(x)
# predictions = tf.keras.layers.Dense(num_classes, activation='softmax')(x)

# # Compile the new model
# model = tf.keras.models.Model(inputs=base_model.input, outputs=predictions)
# model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# # Set up the image data generator
# train_datagen = ImageDataGenerator(rescale=1./255,
#                                    zoom_range=[0.5, 2.0],
#                                    width_shift_range=0.1,
#                                    height_shift_range=0.1)

# # Load the training data
# train_data_dir = 'D:\\pill\\image\\EXK\\EXK8(rembg_his)\\'
# train_generator = train_datagen.flow_from_directory(train_data_dir,
#                                                     target_size=(img_height, img_width),
#                                                     batch_size=32,
#                                                     class_mode='categorical')

# # Train the model
# model.fit(train_generator, epochs=100)

from tensorflow.keras.applications import ResNet50
from tensorflow.keras.models import Sequential
from tensorflow.keras import layers

model = Sequential()
model.add(ResNet50(include_top=True, weights=None, input_shape=(64, 64, 3), classes=2))

model.summary()